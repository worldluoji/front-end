1. alt
An alt attribute helps in cases where the image fails to load or can't be seen by a user. 
Search engines also use it to understand what an image contains to include it in search results. 
Here's an example:
<img src="importantLogo.jpeg" alt="Company logo">

sometimes images are grouped with a caption already describing them, or are used for decoration only. 
In these cases, alt text may seem redundant or unnecessary.
也就是说，当图片已经有别的标题，或者只是装饰作用，alt可能就是冗余的或者没有必要的。

When an image is already explained with text content or does not add meaning to a page, 
the img still needs an alt attribute, but it can be set to an empty string. Here's an example:
<img src="visualDecoration.jpeg" alt="">
这时候如果图片加载不出来则不会显示加载不出来的图标。

2. h tag
One final point, each page should always have one (and only one) h1 element, which is the main subject of your content.
This and the other headings are used in part by search engines to understand the topic of the page.

a page with an h2 element followed by several subsections labeled with h4 tags would confuse a screen reader user.
即h2后面不要接h4, 应该接h3,按顺序来。

3. h5语义化标签
a browser renders these elements similar to the humble div. 
However, using them where appropriate gives additional meaning to your markup. 
The tag name alone can indicate the type of information it contains, 
which adds semantic meaning to that content. 
Assistive technologies can access this information to provide better page summary or navigation options to their users.

1) 结构：
<header>
  <h1>Weapons of the Ninja</h1>
</header>
  <main>
    
  </main>

<footer></footer>

header shares the embedded landmark feature you saw with main, 
allowing assistive technologies to quickly navigate to that content.
The header is meant for use in the body tag of your HTML document. 
It is different than the head element, which contains the page's title, meta information, etc.

the footer element has a built-in landmark feature that allows assistive devices to quickly navigate to it. 
It's primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.

2) article、section
article is another one of the new HTML5 elements that add semantic meaning to your markup. 
article is a sectioning element and is used to wrap independent, self-contained content. 
The tag works well with blog entries, forum posts, or news articles.

The section element is also new with HTML5, and has a slightly different semantic meaning than article. 
An article is for standalone content, and a section is for grouping thematically related content.
They can be used within each other, as needed. For example, if a book is the article, then each chapter is a section. 
When there's no relationship between groups of content, then use a div.

3) nav
The nav element is another HTML5 item with the embedded landmark feature for easy screen reader navigation. 
This tag is meant to wrap around the main navigation links in your page.


4) audio
HTML5's audio element gives semantic meaning when it wraps sound or audio stream content in your markup. 
Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing.
This can be done with nearby text on the page or a link to a transcript.

The audio tag supports the controls attribute. This shows the browser default play, pause, and other controls, 
and supports keyboard functionality. This is a boolean attribute, meaning it doesn't need a value, 
its presence on the tag turns the setting on.

example 1:
<audio id="meowClip" controls>
  <source src="audio/meow.mp3" type="audio/mpeg">
  <source src="audio/meow.ogg" type="audio/ogg">
</audio>

Note: Multimedia content usually has both visual and auditory components. 
It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. 
Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.

example 2:
<body>
  <header>
    <h1>Real Coding Ninjas</h1>
  </header>
  <main>
    <p>A sound clip of Zersiax's screen reader in action.</p>
    <audio controls>
      <source src="https://s3.amazonaws.com/freecodecamp/screen-reader.mp3" type="audio/mpeg">
    <audio>
  </main>
</body>

5) figure
